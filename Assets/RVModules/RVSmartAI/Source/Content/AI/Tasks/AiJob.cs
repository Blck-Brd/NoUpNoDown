// Created by Ronis Vision. All rights reserved
// 21.03.2021.

using RVModules.RVLoadBalancer;
using RVModules.RVLoadBalancer.Tasks;
using RVModules.RVSmartAI.Content.AI.Tasks.AutoGenerated;
using UnityEngine;

namespace RVModules.RVSmartAI.Content.AI.Tasks
{
    /// <summary>
    /// Base class for ai jobs
    /// </summary>
    public abstract class AiJob : AiJobBase, I<AiAgentTask>, I<LoadBalancedTask>, ILoadBalancedTask
    {
        #region Fields

        [Header("For debugging only")]
        [SerializeField]
        protected TaskHandler jobHandler;

        [SerializeField]
        protected LoadBalancerConfig loadBalancingConfig;

        [SerializeField]
        [HideInInspector]
        protected int jobPriority;

        [SerializeField]
        [HideInInspector]
        protected string jobLayer;

        #endregion

        #region Properties

        /// <summary>
        /// Default is false to avoid null reference errors when ai is killed/destroyed (when trying to reference context in OnJobFinish)
        /// If set to true, OnJobFinish will be always be after destorying ai while this job is running
        /// </summary>
        protected virtual bool CallOnJobFinishWhenNullContext => false;

        #endregion

        #region Not public methods

        protected sealed override void Execute(float _deltaTime)
        {
            layer = jobLayer;
            priority = jobPriority;
            jobHandler.ScheduleTask(this, loadBalancingConfig);
        }

        protected override void OnContextUpdated()
        {
            base.OnContextUpdated();
            jobHandler = GetComponentFromContext<IJobHandlerProvider>()?.AiJobHandler;
            if (jobHandler == null)
            {
                Debug.LogError("AiJob requires IJobHandlerProvider context!", this);
                return;
            }

            // call fake constructor to create task
            LoadBalancedTask(OnJobUpdateInternal, OnJobStart, OnJobFinish, jobPriority, string.IsNullOrEmpty(name) ? GetType().Name : name);
        }

        protected void FinishJob() => FinishTask();

        private void OnJobUpdateInternal(float _deltaTime)
        {
            if (Context as Object == null || this == null)
            {
                // remove on job finish call to avoid errors resulting from doing something using null context
                if (!CallOnJobFinishWhenNullContext) OnTaskFinish = null;
                FinishJob();
                return;
            }

            OnJobUpdate(_deltaTime);
        }

        protected override void OnDestroy()
        {
            if (!CallOnJobFinishWhenNullContext) OnTaskFinish = null;

            base.OnDestroy();
            FinishJob();
        }

        protected abstract void OnJobStart();
        protected abstract void OnJobUpdate(float _deltaTime);
        protected abstract void OnJobFinish();

        #endregion
    }
}